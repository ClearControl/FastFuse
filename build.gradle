buildscript {
    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath group: 'de.dynamicfiles.projects.gradle.plugins', name: 'javafx-gradle-plugin', version: '8.8.2'
    }
}

plugins {
  id "com.jfrog.bintray" version "1.2"
  id "us.kirchmeier.capsule" version "1.0.2"
  id "com.diffplug.gradle.spotless" version "3.1.0"
}


apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: "com.jfrog.bintray"
apply plugin: 'javafx-gradle-plugin'
apply plugin: 'com.diffplug.gradle.spotless'
//apply plugin: 'findbugs'




sourceSets {
    main
    {
        java
        { srcDir 'src' }
        resources
        { srcDir 'src' }
    }
    test
    {
        java
        { srcDir 'src' }
        resources
        { srcDir 'src' }
    }
}

/*
 * Gets the version name from the latest Git tag
 */
def getVersionName = {
    ->
    try
    {
	    def stdout = new ByteArrayOutputStream()
	    exec {
	        commandLine 'git', 'describe', '--tags'
	        standardOutput = stdout
	    }
	    return stdout.toString().trim()
    }
    catch(Throwable e)
    {
    	println e
    }
}


sourceCompatibility = 1.8

group = 'net.clearcontrol'
version = getVersionName()


test 
{
    testLogging.showStandardStreams = true 
    testLogging 
    {
        events "passed", "skipped", "failed"
    }

    exclude '**/demo/**'

    maxHeapSize = "16G"
}

configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies 
{
    // commons lang:
    compile 'org.apache.commons:commons-lang3:3.4'
    compile 'org.apache.commons:commons-math3:3.6.1'
    
    // SCIFIO:
    //compile ('io.scif:scifio:0.30.0')           {transitive= true; changing= true}
    
    // BioFormats:
    //compile ('ome:bioformats_package:5.3.0')
    
    // Vecmath:
    compile ('javax.vecmath:vecmath:1.5.2')

    // CoreMem:
    compile ('net.coremem:CoreMem:0.4.3')         {transitive= true; changing= true}

    // ClearCL:
    compile ('net.clearvolume:clearcl:0.4.6')     {transitive= true; changing= true}
    
    // Symbrio:
    compile ('net.clearcontrol:Simbryo:0.6.1')    {transitive= true; changing= true}
    
        
    // JUnit:
    compile group: 'junit', name: 'junit', version: '4.11'
    testCompile group: 'junit', name: 'junit', version: '4.11'
}


repositories 
{
    // main repos:
    mavenCentral()
    maven { url "http://oss.sonatype.org/content/groups/public"} 
    maven { url "http://mvnrepository.com/artifact" }

    // ClearControl:
    maven { url  "http://dl.bintray.com/clearcontrol/ClearControl"  }

    // ClearVolume: 
    maven { url  "http://dl.bintray.com/clearvolume/ClearVolume"  }
    
    //Sqeazy:
    maven {url  "http://dl.bintray.com/psteinb/maven" }
    
    // ImageJ repo:
    maven {url  "http://maven.imagej.net/content/repositories/releases/"}
    
    // Bioformats:
    maven {url "http://artifacts.openmicroscopy.org/artifactory/maven"}

}

task sourcesJar(type: Jar, dependsOn:classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn:javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
      tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
      }
    }
  }


//***********************************************************************************

// PUBLISHING




artifacts
{
    archives sourcesJar
    archives javadocJar
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifact sourcesJar { classifier "sources" }
        }
    }
}

apply from: 'gradle/bintrayUpload.gradle'


//***********************************************************************************
// GIT HOOKS:

apply from: 'gradle/install-git-hooks.gradle'

//***********************************************************************************
// SPOTLESS:

spotless {
    java {
        //licenseHeader '/* Licensed under Apache-2.0 */' // License header
 
        importOrder(['java', 'javax', 'com', 'org'])

        removeUnusedImports() // removes any unused imports

        eclipseFormatFile 'codeformat.eclipse.xml'  
    }
}


//***********************************************************************************
// FINDBUGS:

//tasks.withType(FindBugs) {
//    reports {
//        xml.enabled false
//        html.enabled true
//    }
//}

